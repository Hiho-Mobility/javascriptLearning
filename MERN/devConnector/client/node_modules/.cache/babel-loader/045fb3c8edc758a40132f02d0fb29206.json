{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { bindActionCreators } from '../../../../../../../../../../Library/Caches/typescript/3.4.3/node_modules/redux'; //LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n  } catch (err) {}\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/husseinnagri/Desktop/Frontend_Learning/ReactLearning/learningReact/javscriptLearning/MERN/devConnector/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","setAuthToken","bindActionCreators","loadUser","dispatch","localStorage","token","res","get","err","register","name","email","password","config","headers","body","JSON","stringify","post","type","payload","data","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,WAHF,EAIEC,UAJF,QAKO,SALP;AAMA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,kBAAT,QAAmC,kFAAnC,C,CAGA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBL,IAAAA,YAAY,CAACI,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,WAAV,CAAlB;AAED,GAHD,CAGE,OAAOC,GAAP,EAAY,CAEb;AAIF,CAbM,C,CAkBP;;AACA,OAAO,MAAMC,QAAQ,GACnB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KACE,MAAMT,QAAN,IAAkB;AAChB,QAAMU,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMN,GAAG,GAAG,MAAMZ,KAAK,CAACwB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAV,IAAAA,QAAQ,CAAC;AACPgB,MAAAA,IAAI,EAAEtB,gBADC;AAEPuB,MAAAA,OAAO,EAAEd,GAAG,CAACe;AAFN,KAAD,CAAR;AAKD,GARD,CAQE,OAAOb,GAAP,EAAY;AACZ,UAAMc,MAAM,GAAGd,GAAG,CAACe,QAAJ,CAAaF,IAAb,CAAkBC,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAItB,QAAQ,CAACR,QAAQ,CAAC8B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDvB,IAAAA,QAAQ,CAAC;AACPgB,MAAAA,IAAI,EAAEvB;AADC,KAAD,CAAR;AAGD;AAIF,CAjCE","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert'\nimport {\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  USER_LOADED,\n  AUTH_ERROR\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { bindActionCreators } from '../../../../../../../../../../Library/Caches/typescript/3.4.3/node_modules/redux';\n\n\n//LOAD USER\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"/api/auth\");\n\n  } catch (err) {\n\n  }\n\n\n\n}\n\n\n\n\n//Register User\nexport const register =\n  ({ name, email, password }) =>\n    async dispatch => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n\n      const body = JSON.stringify({ name, email, password });\n\n      try {\n        const res = await axios.post(\"/api/users\", body, config);\n\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: res.data\n        });\n\n      } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n\n        dispatch({\n          type: REGISTER_FAIL\n        });\n      }\n\n\n\n    }"]},"metadata":{},"sourceType":"module"}